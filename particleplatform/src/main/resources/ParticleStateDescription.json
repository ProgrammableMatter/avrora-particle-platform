{
  "enums": {
    /* StateType enum describes the node state */
    "StateType": [
      "STATE_TYPE_START",
      "STATE_TYPE_ACTIVE",
      "STATE_TYPE_NEIGHBOURS_DISCOVERY",
      "STATE_TYPE_NEIGHBOURS_DISCOVERED",
      "STATE_TYPE_DISCOVERY_PULSING",
      "STATE_TYPE_RESET",
      "STATE_TYPE_WAIT_FOR_BEING_ENUMERATED",
      "STATE_TYPE_ENUMERATING_SOUTH_NEIGHBOUR",
      "STATE_TYPE_ENUMERATING_EAST_NEIGHBOUR",
      "STATE_TYPE_ENUMERATED",
      "STATE_TYPE_IDLE",
      "STATE_TYPE_INTERPRETE_COMMAND",
      "STATE_TYPE_RX_A",
      "STATE_TYPE_RX_B",
      "STATE_TYPE_FORWARD_PKG",
      "STATE_TYPE_SCHEDULE_COMMAND",
      "STATE_TYPE_EXECUTE_COMMAND",
      "STATE_TYPE_COMMAND_SCHEDULED_ACK",
      "STATE_TYPE_ERRONEOUS"
    ],
    /* NodeType enum describes the node type regarding to it's connectivity */
    "NodeType": [
      "NODE_TYPE_ORPHAN",
      "NODE_TYPE_ORIGIN",
      "NODE_TYPE_INTER_HEAD",
      "NODE_TYPE_INTER_NODE",
      "NODE_TYPE_TAIL",
      "NODE_TYPE_INVALID"
    ]
  },
  "structs": {
    /* state in direction register of port A */
    "A.dir": {
      "properties": [
        /* names of the port wires, this string will be printed after the port value */
        "(EAST_TX | EAST_SW | TP3 | PA4 | STH_TX | STH_SW | TP2 | ERROR)"
      ],
      /* how to print the port value */
      "propertyTypes": [
        /* format as bit, will print as 0bxxxxxxxx */
        "bit"
      ],
      "propertyAddresses": [
        /* address in sram of the register */
        58
      ]
    },
    /* state in register of port (output) A  */
    "A.out": {
      "properties": [
        "(EAST_TX | EAST_SW | TP3 | PA4 | STH_TX | STH_SW | TP2 | ERROR)"
      ],
      "propertyTypes": [
        /* format as bit */
        "bit"
      ],
      "propertyAddresses": [
        /* address in sram of the register */
        59
      ]
    },
    /* state in direction register of port B */
    "B.dir": {
      "properties": [
        /* names of the port wires, this string will be printed after the port value */
        "(B7 | B6 | B5 | STAT0 | STAT1 | NRTH_RX | HTBEAT | B0)"
      ],
      /* how to print the port value */
      "propertyTypes": [
        /* format as bit, will print as 0bxxxxxxxx */
        "bit"
      ],
      "propertyAddresses": [
        /* address in sram of the register */
        55
      ]
    },
    /* state in register of port (output) B  */
    "B.out": {
      "properties": [
        "(B7 | B6 | B5 | STAT0 | STAT1 | NRTH_RX | HTBEAT | B0)"
      ],
      "propertyTypes": [
        /* format as bit */
        "bit"
      ],
      "propertyAddresses": [
        /* address in sram of the register */
        56
      ]
    },
    /* state in register of pin (input) B  */
    "B.in": {
      "properties": [
        "(B7 | B6 | B5 | STAT0 | STAT1 | NRTH_RX | HTBEAT | B0)"
      ],
      "propertyTypes": [
        /* format as bit */
        "bit"
      ],
      "propertyAddresses": [
        /* address in sram of the register */
        54
      ]
    },
    /* state in direction register of port C */
    "C.dir": {
      "properties": [
        /* names of the port wires, this string will be printed after the port value */
        "(C7  | C6 | C5 | NRTH_SW | C3 | TP1 | C1 | NRTH_TX)"
      ],
      /* how to print the port value */
      "propertyTypes": [
        /* format as bit, will print as 0bxxxxxxxx */
        "bit"
      ],
      "propertyAddresses": [
        /* address in sram of the register */
        52
      ]
    },
    /* state in register of port (output) C  */
    "C.out": {
      "properties": [
        "(C7  | C6 | C5 | NRTH_SW | C3 | TP1 | C1 | NRTH_TX)"
      ],
      "propertyTypes": [
        /* format as bit */
        "bit"
      ],
      "propertyAddresses": [
        /* address in sram of the register */
        53
      ]
    },
    /* state in direction register of port D*/
    "D.dir": {
      "properties": [
        "(D7 | D6 | D5 | D4 | EAST_RX | STH_RX | D1 | D0)"
      ],
      "propertyTypes": [
        /* format as bit */
        "bit"
      ],
      "propertyAddresses": [
        /* register address in stram */
        49
      ]
    },
    /* state in register of port (output) D */
    "D.out": {
      "properties": [
        "(D7 | D6 | D5 | D4 | EAST_RX | STH_RX | D1 | D0)"
      ],
      "propertyTypes": [
        /* format as bit */
        "bit"
      ],
      "propertyAddresses": [
        /* register start address in sram */
        50
      ]
    },
    /* state in register of pin (input) D */
    "D.in": {
      "properties": [
        "(D7 | D6 | D5 | D4 | EAST_RX | STH_RX | D1 | D0)"
      ],
      "propertyTypes": [
        /* format as bit */
        "bit"
      ],
      "propertyAddresses": [
        /* register start address in sram */
        48
      ]
    },
    /* UDR usart i/o register */
    "UDR": {
      "properties": [
        ""
      ],
      "propertyTypes": [
        /* format as char */
        "char"
      ],
      "propertyAddresses": [
        /* register address in sram */
        44
      ]
    },
    /* state in general interrupt control register */
    "GICR": {
      "properties": [
        "(INT1 | INT0 | INT2 | - | - | - | IVSEL | IVCE)"
      ],
      "propertyTypes": [
        /* format as bit */
        "bit"
      ],
      "propertyAddresses": [
        /* register address in sram */
        91
      ]
    },
    /* state in timer/counter interrupt flag register */
    "TIFR": {
      "properties": [
        "(OCF2 | TOV2 | ICF1 | OCF1A | OCF1B | TOV1 | OCF0 | TOV0)"
      ],
      "propertyTypes": [
        /* format as bit */
        "bit"
      ],
      "propertyAddresses": [
        /* register address in sram */
        88
      ]
    },
    /* state in timer compare register 1A */
    "TCCR1A": {
      "properties": [
        "(COM1A1 | COM1A0 | COM1B1 | COM1B0 | OCF1B | FOC1A | WGM11 | WGM10)"
      ],
      "propertyTypes": [
        /* format as bit */
        "bit"
      ],
      "propertyAddresses": [
        /* register address in sram */
        79
      ]
    },
    /* state in timer compare register 1B */
    "TCCR1B": {
      "properties": [
        "(ICNC1 | ICES1 | - | WGM13 | WGM12 | CS12 | CS11 | CS10)"
      ],
      "propertyTypes": [
        /* format as bit */
        "bit"
      ],
      "propertyAddresses": [
        /* register address in sram */
        78
      ]
    },
    /* state in timer/counter1 compare register high byte */
    "OCR1AH": {
      "properties": [
        ""
      ],
      "propertyTypes": [
        /* format as bit */
        "hex"
      ],
      "propertyAddresses": [
        /* register address in sram */
        75
      ]
    },
    /* state in timer/counter1 compare register low byte */
    "OCR1AL": {
      "properties": [
        ""
      ],
      "propertyTypes": [
        /* format as bit */
        "hex"
      ],
      "propertyAddresses": [
        /* register address in sram */
        74
      ]
    },
    /* state in MCU control register*/
    "MCUCR": {
      "properties": [
        "(SM2 | SE | SM1 | SM0 | ISC11 | ISC10 | ISC01 | ISC00)"
      ],
      "propertyTypes": [
        /* format as bit */
        "bit"
      ],
      "propertyAddresses": [
        /* register address in sram */
        85
      ]
    },
    /* state in MCU control and status register */
    "MCUCSR": {
      "properties": [
        "(JTD | ISC2 | - | JTRF | WDRF | BORF | EXTRF | PORF)"
      ],
      "propertyTypes": [
        /* format as bit */
        "bit"
      ],
      "propertyAddresses": [
        /* register address in sram */
        84
      ]
    },
    /* state in Timer/Counter0 (8 Bits) register */
    "TCNT0": {
      "properties": [
        ""
      ],
      "propertyTypes": [
        /* format as int */
        "int"
      ],
      "propertyAddresses": [
        /* register address in sram */
        82
      ]
    },
    /* state in timer/counter1 - counter register high byte register */
    "TCNT1H": {
      "properties": [
        ""
      ],
      "propertyTypes": [
        /* format as hex */
        "hex"
      ],
      "propertyAddresses": [
        /* register address in sram */
        77
      ]
    },
    /* state in timer/counter1 - counter register low byte register */
    "TCNT1L": {
      "properties": [
        ""
      ],
      "propertyTypes": [
        /* format as hex */
        "hex"
      ],
      "propertyAddresses": [
        /* register address in sram */
        76
      ]
    },
    /* state in timer/counter interrupt mask register */
    "TIMSK": {
      "properties": [
        "(OCIE2 | TOIE2 | TICIE1 | OCIE1A | OCIE1B | TOIE1 | OCIE0 | TOIE0)"
      ],
      "propertyTypes": [
        /* format as bit */
        "bit"
      ],
      "propertyAddresses": [
        /* register address in sram */
        89
      ]
    },
    /* state in general interrupt flag register*/
    "GIFR": {
      "properties": [
        "(INTF1 | INTF0 | INTF2 | - | - | - | - | -)"
      ],
      "propertyTypes": [
        /* format as bit */
        "bit"
      ],
      "propertyAddresses": [
        /* register address in sram */
        90
      ]
    },
    /* status register */
    "SREG": {
      "properties": [
        "(I | T | H | S | V | N | Z | C)"
      ],
      "propertyTypes": [
        /* format as bit */
        "bit"
      ],
      "propertyAddresses": [
        /* register address in sram */
        95
      ]
    },
    /* global status struct*/
    "globalState": {
      "properties": [
        /* StateType - 2 bytes enum */
        "state",
        /* NodeType - 2 bytes enum */
        "type",
        /* next packed struct is NodeId */
        "row",
        "column",
        /* next packed struct is RxBitBuffer */
        "northBytes[0]",
        "northBytes[1]",
        "southBytes[0]",
        "southBytes[1]",
        "eastBytes[0]",
        "eastBytes[1]",
        "(southBitCount[7:4] | northBitCount[3:0])",
        "(-[7:4] | eastBitCount[3:0])",
        /* next packed struct is RxDiscoveryPulseCounter */
        "rxDiscoveryPulseCounter(south[7:4] | north[3:0])",
        "rxDiscoveryPulseCounter(- | isEastConnected | isSouthConnected | isNorthConnected | east[3:0])",
        "rxDiscoveryPulseCounter(loopCount)",
        /* next packed struct is RxInterruptFlankStates */
        "rxInterruptFlankStates( north | south | east | isInitialized | - | - | - | - )"
      ],
      "propertyTypes": [
        /* StateType */
        "StateType",
        /* NodeType */
        "NodeType",
        /* NodeId - row */
        "unsigned char",
        /* column */
        "unsigned char",
        /* RxBitBuffer - unsigned char northBytes[0] */
        "hex",
        /* unsigned char northBytes[1] */
        "hex",
        /* unsigned char southBytes[0] */
        "hex",
        /* unsigned char southBytes[1] */
        "hex",
        /* unsigned char eastBytes[0] */
        "hex",
        /* unsigned char eastBytes[1] */
        "hex",
        /* (southBitCount[7:4] | northBitCount[3:0] ) */
        "hex",
        /* (- | isEastConnected | isSouthConnected | isNorthConnected | east[3:0])" */
        "bin",
        /* RxDiscoveryPulseCounter - north counter | south counter */
        "hex",
        /* east counter | - */
        "hex",
        /* loopCount */
        "hex",
        /* rx interrupt flank states ( north | south | east | isInitialized | - | - | - | - ) */
        "bit"
      ],
      "propertyAddresses": [
        96,
        98,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        107,
        108,
        109,
        110,
        111,
        112,
        113
      ]
    }
  },
  /* data type size bytes to be interpreted */
  "sizeofTypes": {
    "enum": 2,
    /* evaluates to StateType enum names */
    "StateType": 2,
    /* evaluates to NodeType enum Names */
    "NodeType": 2,
    /*evaluates to 8bit unsigned base 10 */
    "unsigned char": 1,
    /*evaluates to 8bit base 10 */
    "int": 1,
    /* evaluates to ascii character */
    "char": 1,
    /* evaluates to 0bXXXXXXXX */
    "bit": 1,
    /* evaluates to 0xXX */
    "hex": 1
  }
}
